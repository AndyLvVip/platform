buildscript {
    ext {
        jooqVersion = '3.11.9'
        mysqlVersion = '8.0.13'
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath "org.jooq:jooq-codegen-maven:${jooqVersion}"
        classpath "mysql:mysql-connector-java:${mysqlVersion}"
    }
}

apply plugin: 'java'

repositories {
    mavenLocal()
    mavenCentral()
}


dependencies {
    compile "org.jooq:jooq:${jooqVersion}"
    implementation "org.jooq:jooq-codegen-maven:${jooqVersion}"
    implementation "mysql:mysql-connector-java:${mysqlVersion}"
    testCompile 'junit:junit:4.12'
}

task generateJooq << {
// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd') {
        jdbc() {
            driver('com.mysql.cj.jdbc.Driver')
            url('jdbc:mysql://127.0.0.1:3306/corporate')
            user('andy')
            password('password')
        }
        generator() {
            database() {
                name 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema 'corporate'
                outputSchemaToDefault true
                recordVersionFields true
                forcedTypes {
                    forcedType {
                        name 'Integer'
                        types 'tinyint'
                    }
                    /*forcedType {
                        name = 'Integer'
                        expression = '.*'
                        types = 'tinyint'
                    }*/
                }
                // ...
            }

            // Watch out for this caveat when using MarkupBuilder with "reserved names"
            // - https://github.com/jOOQ/jOOQ/issues/4797
            // - http://stackoverflow.com/a/11389034/521799
            // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
            generate([:]) {
                javaTimeTypes true
//                pojos true
//                daos true
            }
            target() {
                packageName('jooq.generated.corporate')
                directory("$project.name/src/main/java")
            }
        }
    }

// Run the code generator
// ----------------------
    org.jooq.codegen.GenerationTool.generate(writer.toString())
}