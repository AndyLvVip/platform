buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
        mysqlVersion = '8.0.13'
    }
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'nu.studer:gradle-jooq-plugin:3.0.2'
    }
}
plugins {
    id "org.asciidoctor.convert" version "1.5.3"
}
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'

group = 'uca.fileserver'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springCloudVersion', 'Greenwich.RC2')
}


dependencies {
    implementation project(':common')
    implementation project(':util')
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'
    implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
    implementation 'org.springframework.cloud:spring-cloud-starter-security'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.3.RELEASE'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.3.RELEASE'
    runtimeOnly 'mysql:mysql-connector-java'
    compileOnly 'org.projectlombok:lombok'
    implementation "javax.persistence:javax.persistence-api:+"
    jooqRuntime "mysql:mysql-connector-java:${mysqlVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

jooq {
    version = '3.11.9'
    edition = 'OSS'
    fileServer(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.cj.jdbc.Driver'
            url = 'jdbc:mysql://192.168.63.195:3306/file'
            user = 'uca'
            password = 'password'
            properties {
                property {
                    key = 'ssl'
                    value = 'true'
                }
            }
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                // ...
            }
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = 'file'
                outputSchemaToDefault = true
                recordVersionFields = 'version'
                includes = 'file_set_info|file_item_info'
                // ...
            }
            generate {
                javaTimeTypes = true
//                relations = true
//                deprecated = false
//                records = true
//                immutablePojos = true
//                daos = true
//                fluentSetters = true
                // ...
            }
            target {
                packageName = 'jooq.generated.fileserver'
                directory = 'src/main/java'
            }
        }
    }
}


// removes the task dependency from compileJava to generateSampleJooqSchemaSource
project.tasks.getByName('compileJava').dependsOn -= 'generateFileServerJooqSchemaSource'
